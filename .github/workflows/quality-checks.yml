name: Quality Checks

permissions:
  contents: read
  pull-requests: write
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  # Shared job to install dependencies once and cache for other jobs
  setup:
    name: Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Cache node_modules
        uses: actions/cache/save@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: npm-${{ runner.os }}-node-20-${{ hashFiles('package-lock.json') }}

  # Build WASM once and cache for other jobs that need it
  build-wasm:
    name: Build WASM
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Restore node_modules cache
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: npm-${{ runner.os }}-node-20-${{ hashFiles('package-lock.json') }}
          fail-on-cache-miss: true

      - name: Build AssemblyScript WASM
        run: npm run asbuild:release

      - name: Cache WASM build
        uses: actions/cache/save@v4
        with:
          path: build/
          key: wasm-${{ runner.os }}-${{ hashFiles('assembly/**/*.ts', 'asconfig.json') }}

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Restore node_modules cache
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: npm-${{ runner.os }}-node-20-${{ hashFiles('package-lock.json') }}
          fail-on-cache-miss: true

      - name: Run ESLint
        run: npm run lint

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Restore node_modules cache
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: npm-${{ runner.os }}-node-20-${{ hashFiles('package-lock.json') }}
          fail-on-cache-miss: true

      - name: Run tests with coverage
        run: |
          echo "## 🧪 Test Execution" >> $GITHUB_STEP_SUMMARY
          start_time=$(date +%s)
          npm test -- --coverage --ci --maxWorkers=2
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Execution Time:** ${duration}s" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Check coverage thresholds
        run: |
          echo "Coverage thresholds enforced via jest.config.js"
          echo "Thresholds:"
          echo "  - Global: 38% statements, 35% branches, 39% functions, 38% lines"
          echo "  - HackRF implementation: ≥72-93% coverage"
          echo "  - DSP utilities: ≥57-96% coverage"
          echo "  - Core utilities: ≥77-95% coverage"

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info,./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
          verbose: true

  format:
    name: Check Formatting
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Restore node_modules cache
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: npm-${{ runner.os }}-node-20-${{ hashFiles('package-lock.json') }}
          fail-on-cache-miss: true

      - name: Check Prettier formatting
        run: npm run format:check

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [setup, build-wasm]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Restore node_modules cache
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: npm-${{ runner.os }}-node-20-${{ hashFiles('package-lock.json') }}
          fail-on-cache-miss: true

      - name: Restore WASM build cache
        uses: actions/cache/restore@v4
        with:
          path: build/
          key: wasm-${{ runner.os }}-${{ hashFiles('assembly/**/*.ts', 'asconfig.json') }}
          fail-on-cache-miss: true

      - name: Build webpack bundle
        run: npm run build:prod

      - name: Analyze bundle size
        run: |
          echo "## 📦 Bundle Size Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### JavaScript Bundles" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          ls -lh dist/*.js | awk '{printf "%-40s %10s\n", $9, $5}' >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### WebAssembly" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          ls -lh dist/*.wasm | awk '{printf "%-40s %10s\n", $9, $5}' >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          total_size=$(du -sh dist/ | cut -f1)
          echo "**Total Size:** $total_size" >> $GITHUB_STEP_SUMMARY
          
          # Check if size exceeds budget
          size_bytes=$(du -sb dist/ | cut -f1)
          budget_bytes=3145728  # 3MB budget
          if [ "$size_bytes" -gt "$budget_bytes" ]; then
            echo "⚠️ **Warning:** Bundle size ($total_size) exceeds budget (3MB)" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ Bundle size within budget" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: dist/
          retention-days: 7

  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Restore node_modules cache
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: npm-${{ runner.os }}-node-20-${{ hashFiles('package-lock.json') }}
          fail-on-cache-miss: true

      - name: Run TypeScript compiler check
        run: npx tsc --noEmit

  all-checks:
    name: All Quality Checks Passed
    runs-on: ubuntu-latest
    needs: [lint, test, format, build, type-check]
    if: always()
    steps:
      - name: Check all jobs succeeded
        run: |
          if [[ "${{ needs.lint.result }}" != "success" || \
                "${{ needs.test.result }}" != "success" || \
                "${{ needs.format.result }}" != "success" || \
                "${{ needs.build.result }}" != "success" || \
                "${{ needs.type-check.result }}" != "success" ]]; then
            echo "One or more quality checks failed"
            exit 1
          fi
          echo "All quality checks passed!"
